import type {Adapter, Builder} from '@sveltejs/kit'
import {build} from 'esbuild'
import {builtinModules} from 'node:module'
import type {Config as EdgeFunctionsConfig} from '@netlify/edge-functions'
import type {Config as FunctionsConfig} from '@netlify/functions'
import {cwd} from 'node:process'
import {join, relative} from 'node:path'
import {writeFileSync} from 'node:fs'

const fn_name = 'SvelteKit Server'
const generator = '@hrishikeshk/sveltekit-adapter-netlify@0.0.1'
const working_dir = cwd()

/* root folder for Frameworks API: https://docs.netlify.com/frameworks-api/ */
const ntl_frameworks_api_dir = join(working_dir, '.netlify/v1')

/* write to SvelteKit folder to avoid polluting the .netlify folder */
const sk_server_dir = join(working_dir, '.svelte-kit/netlify')

async function init(builder : Builder) {

  const publish_dir = join(working_dir, 'build')

  /* static config to for Netlify to correctly publish build and add headers */
  const ntl_config_json = {
    headers: [{
      for: `/${builder.getAppPath()}/immutable/*`,
      values: {
        'cache-control': 'immutable, public, max-age=3153600'
      }
    }]
  }

  /* base directory in SvelteKit, if configured, would have their output nested in Netlify's publish path */
  const sk_publish_dir = join(publish_dir, builder.config.kit.paths.base)

  /*
    delete the folders this adapter writes to
    ntl_config_json.build.publish will contain all static files
    ntl_frameworks_api_dir will contain Config as well as the Lambda Function
    sk_server_dir will contain the server files generated by SvelteKit's builder.writeServer()
   */
  builder.rimraf(publish_dir)
  builder.rimraf(ntl_frameworks_api_dir)
  builder.rimraf(sk_server_dir)

  /*
    create directories before writing data to prevent any failure
    we create the most-nested directory so parent dirs are automatically created
    ntl_frameworks_api_dir is required to write the config,
    (Edge) Functions will create their directory when needed
    sk_publish_dir will auto-create publish_dir
   */
  builder.mkdirp(ntl_frameworks_api_dir)
  builder.mkdirp(sk_publish_dir)

  /* write common files, adapter-specific files will be written later */
  builder.writeClient(sk_publish_dir)
  builder.writePrerendered(sk_publish_dir)
  builder.writeServer(sk_server_dir)
  writeFileSync(join(ntl_frameworks_api_dir, 'config.json'), JSON.stringify(ntl_config_json))

}

export function adapterNetlifyEdgeFunctions(options : Partial<Pick<EdgeFunctionsConfig, 'excludedPath' | 'onError' | 'rateLimit'>> = {}) {
  return {
    async adapt(builder) {

      await init(builder)

      /* Frameworks API Edge Functions dir */
      const ntl_edge_functions_dir = join(ntl_frameworks_api_dir, 'edge-functions')

      /* Edge Function template */
      const efn = `import {Server} from '${join(builder.getServerDirectory(), 'index.js')}'
const server = new Server(${builder.generateManifest({
  relativePath: './'
})})
await server.init({
  env: Deno.env.toObject()
})
export default async function(req, context) {
  return server.respond(req, {
    getClientAddress() {
      return context.ip
    },
    platform: {
      context
    }
  })
}
export const config = {
  excludedPath: ${JSON.stringify([
    '/.netlify/*',
    `/${builder.getAppPath()}/immutable/*`
  ].concat(builder.prerendered.paths).concat(options.excludedPath || []))},
  generator: '${generator}',
  name: '${fn_name}',
  onError: ${JSON.stringify(options.onError || undefined)},
  path: '/*',
  rateLimit: ${JSON.stringify(options.rateLimit || undefined)}
}`

      /*
        write the Edge Function into SvelteKit's server dir,
        that will be processed by esbuild and written to Netlify's output dir
       */
      const ntl_ef_path = join(sk_server_dir, 'sk-server.js')
      writeFileSync(ntl_ef_path, efn)

      /* create Edge Functions output dir */
      builder.mkdirp(ntl_edge_functions_dir)

      /* allow esbuild to handle bundling */
      await build({
        alias: Object.fromEntries(builtinModules.map(id => [
          id,
          `node:${id}`
        ])),
        bundle: true,
        entryPoints: [
          ntl_ef_path
        ],
        external: builtinModules.map(id => `node:${id}`),
        format: 'esm',
        mainFields: [
          'module',
          'main'
        ],
        outfile: join(ntl_edge_functions_dir, 'sk-server.js'),
        platform: 'neutral',
        target: 'esnext'
      })
    },
    name: generator,
    supports: {
      read(config) {
        throw new Error(`${generator} cannot use \`read\` from \`$apps/server\' in route \`${config.route.id}\`, switch to \`adapterNetlifyFunctions\``)
      }
    }
  } satisfies Adapter
}

export function adapterNetlifyFunctions(options : Partial<Pick<FunctionsConfig, 'excludedPath' | 'rateLimit'>> = {}) {
  return {
    async adapt(builder) {

      await init(builder)

      /* Frameworks API Functions dir */
      const ntl_functions_dir = join(ntl_frameworks_api_dir, 'functions')

      /* Function template */
      const fn = `import {env} from 'node:process'
import {File} from 'node:buffer' // TODO: remove from Node.js 20+
import {Server} from '${join(builder.getServerDirectory(), 'index.js')}'
import {webcrypto} from 'node:crypto'
for (const name in {
  crypto: webcrypto,
  File
}) {
  if (name in globalThis) {
    continue
  }
  Object.defineProperty(globalThis, name, {
    configurable: true,
    enumerable: true,
    value: globals[name],
    writable: true
  })
}
const server = new Server(${builder.generateManifest({
  relativePath: relative(ntl_functions_dir, sk_server_dir)
})})
await server.init({
  env
})
export default async function(req, context) {
  return server.respond(req, {
    getClientAddress() {
      return context.ip
    },
    platform: {
      context
    }
  })
}
export const config = {
  displayName: '${fn_name}',
  excludedPath: ${JSON.stringify([
    '/.netlify/*'
  ].concat(options.excludedPath || []))},
  generator: '${generator}',
  path: '/*',
  preferStatic: true,
  rateLimit: ${JSON.stringify(options.rateLimit || undefined)}
}`

      /* create the directories to write to */
      builder.mkdirp(ntl_functions_dir)

      /* write file */
      writeFileSync(join(ntl_functions_dir, 'sk-server.js'), fn)
    },
    name: generator
  } satisfies Adapter
}

export function adapterNetlifyStatic() {
  return {
    async adapt(builder) {
      const dynamic_routes = builder.routes.filter(route => !route.prerender)
      if (dynamic_routes.length) {
        // TODO: throw error?
      }
      // TODO: WIP
    },
    name: generator
  } satisfies Adapter
}